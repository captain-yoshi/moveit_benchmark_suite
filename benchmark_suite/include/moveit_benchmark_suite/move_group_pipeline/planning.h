/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2021, Captain Yoshi
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Bielefeld University nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Modified version of Zachary Kingston robowflex
   Desc:
*/

#pragma once

#include <moveit/move_group_interface/move_group_interface.h>
//#include <moveit/planning_interface/planning_interface.h>
#include <moveit/planning_interface/planning_request.h>

#include <moveit/planning_scene/planning_scene.h>

#include <moveit_benchmark_suite/robot.h>
#include <moveit_benchmark_suite/planner.h>

namespace moveit_benchmark_suite
{
MOVEIT_CLASS_FORWARD(MoveGroupPlanner);

/** Motion planner that uses the move group interface pipeline to load a planner plugin. */
class MoveGroupPlanner : public Planner
{
public:
  /** \brief Constructor.
   */
  MoveGroupPlanner(const RobotPtr& robot, const std::string& name = "");

  // non-copyable
  MoveGroupPlanner(MoveGroupPlanner const&) = delete;
  void operator=(MoveGroupPlanner const&) = delete;

  bool initialize(const std::string& group);
  /** \brief Plan a motion given a \a request and a \a scene.
   *  Uses the planning pipeline's generatePlan() method, which goes through planning adapters.
   *  \param[in] scene A planning scene for the same \a robot_ to compute the plan in.
   *  \param[in] request The motion planning request to solve.
   *  \return The motion planning response generated by the planner.
   */

  moveit::planning_interface::MoveItErrorCode plan(moveit::planning_interface::MoveGroupInterface::Plan& plan);

  virtual void preRun(const planning_scene::PlanningSceneConstPtr& scene,
                      const planning_interface::MotionPlanRequest& request);

protected:
  moveit::planning_interface::MoveGroupInterfacePtr move_group_;

public:
  std::string group_;
};

}  // namespace moveit_benchmark_suite
